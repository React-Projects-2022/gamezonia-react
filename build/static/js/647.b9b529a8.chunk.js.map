{"version":3,"file":"static/js/647.b9b529a8.chunk.js","mappings":"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","sources":["components/core/Loading.js","graphql/operations/fragment/shop-product.js","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts","graphql/operations/query/details-page.js","pages/public/Details.js","../node_modules/@apollo/src/react/hooks/useSubscription.ts"],"sourcesContent":["import { Ring } from \"react-awesome-spinners\";\n\nconst Loading = () => (\n  <span className=\"loading\">\n    <Ring size={454} />\n  </span>\n);\n\nexport default Loading;","import { gql } from \"@apollo/client\";\n\n\nexport const SHOP_PRODUCT_FRAGMENT = gql`\nfragment ShopProductObject on ShopProduct {\n  id\n  price\n  stock\n  product {\n    name\n    img\n    rating {\n      value\n      count\n    }\n    screenshoot @include(if: $relationScreens)\n  }\n  platform @include(if: $showPlatform){\n    id\n    name\n    slug\n  }\n  relationalProducts @include(if: $relationScreens) {\n    id\n    platform {\n      name\n    }\n  }\n}\n`;","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport {\n  LazyQueryHookOptions,\n  QueryLazyOptions,\n  QueryTuple,\n} from '../types/types';\nimport { useQuery } from './useQuery';\nimport { OperationVariables } from '../../core';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): QueryTuple<TData, TVariables> {\n  const [execution, setExecution] = useState<{\n    called: boolean,\n    options?: QueryLazyOptions<TVariables>,\n  }>({\n    called: false,\n  });\n\n  let result = useQuery<TData, TVariables>(query, {\n    ...options,\n    ...execution.options,\n    // We donâ€™t set skip to execution.called, because some useQuery SSR code\n    // checks skip for some reason.\n    fetchPolicy: execution.called ? options?.fetchPolicy : 'standby',\n    skip: undefined,\n  });\n\n  if (!execution.called) {\n    result = {\n      ...result,\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      called: false,\n    };\n  }\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = (...args: any) => {\n        setExecution((execution) => ({ ...execution, called: true }));\n        return (method as any)(...args);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  result.error = result.error || void 0;\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    QueryTuple<TData, TVariables>[0]\n  >((executeOptions?: QueryLazyOptions<TVariables>) => {\n    setExecution({ called: true, options: executeOptions });\n    return result.refetch(executeOptions?.variables).then((result1) => {\n      const result2 = {\n        ...result,\n        data: result1.data,\n        error: result1.error,\n        called: true,\n        loading: false,\n      };\n\n      Object.assign(result2, eagerMethods);\n      return result2;\n    });\n  }, []);\n\n  return [execute, result];\n}\n","import { gql } from '@apollo/client';\nimport { SHOP_PRODUCT_FRAGMENT } from './../fragment/shop-product';\n\nexport const DETAILS_PAGE = gql`\n  query DetailsPageInfo(\n    $id: Int!\n    $showPlatform: Boolean = true\n    $relationScreens: Boolean = true\n  ) {\n    randomItems: shopProductsOffersLast(itemsPage: 6, random: true) {\n      shopProducts {\n        ...ShopProductObject\n      }\n    }\n    details: shopProductDetails(id: $id) {\n      shopProduct {\n        ...ShopProductObject\n      }\n    }\n  }\n  ${SHOP_PRODUCT_FRAGMENT}\n`;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useLazyQuery, useSubscription, gql } from \"@apollo/client\";\n\nimport { Rating, QuantitySelector, useCart } from \"@mugan86/react-shop-ui\";\nimport { DETAILS_PAGE } from \"./../../graphql/operations/query/details-page\";\n\nimport { navigateTo } from \"../../helpers/navigate\";\nimport Loading from \"../../components/core/Loading\";\n\nimport \"./../../styles/public/details.css\";\nconst Details = () => {\n  const { manageProduct } = useCart();\n  const [idProduct, setIdProduct] = useState(useParams().id);\n  const [principalImage, setPrincipalImage] = useState(\"\");\n  const [quantity, setQuantity] = useState( 1 );\n\n  const [getDetails, { data: dataDetails, loading }] =\n    useLazyQuery(DETAILS_PAGE);\n  const detailsSelect = !!dataDetails && dataDetails.details.shopProduct;\n  const relationalItems = !!dataDetails && dataDetails.randomItems.shopProducts;\n  useEffect(\n    () =>\n      getDetails({\n        variables: {\n          id: +idProduct,\n          showPlatform: true,\n          relationScreens: true,\n        },\n      }),\n    [getDetails, idProduct]\n  );\n\n  const { data: stock } = useSubscription(gql`\n    subscription obtenerDetallesActualizados($id: Int!) {\n      selectProductStockUpdate(id: $id) {\n        id\n        stock\n      }\n    }\n  `);\n  // const dataFromCart = getProductInfo(idProduct);\n  \n\n  const updateValue = (qty) => setQuantity(qty);\n\n  const imageClick = (item) =>\n    setPrincipalImage(detailsSelect.product.screenshoot[item]);\n\n  const selectOtherPlatform = (event) => {\n    const id = +event.target.value;\n    setIdProduct(id);\n    window.history.replaceState({}, \"\", `/games/details/${id}`);\n  };\n\n  const addCart = () => {\n    // console.log(`Add cart product: ${detailsSelect.product.name} ${quantity}`);\n    // alert(`No implementado: ${detailsSelect.product.name} ${quantity}`);\n    const productToCart = {\n      description: detailsSelect.platform.name,\n      id: idProduct,\n      img: detailsSelect.product.img,\n      name: detailsSelect.product.name,\n      price: detailsSelect.price,\n      qty: quantity,\n      rating: {\n        count: detailsSelect.product.rating.count,\n        value: detailsSelect.product.rating.value,\n      },\n      stock: detailsSelect.stock,\n    };\n    manageProduct(productToCart);\n  };\n\n  useEffect(() => {\n    if (!!detailsSelect) {\n      setPrincipalImage(detailsSelect.product.screenshoot[0]);\n    }\n  }, [detailsSelect]);\n\n  if (stock) {\n    console.log(\"Nuevo stock\", stock);\n  }\n\n  /**\n   * this.productService.stockUpdateListener(id).subscribe(\n      (result) => {\n        console.log('ActualizaciÃ³n', result);\n        this.product.stock = result.stock;\n\n        // COmprobar que cantidad seleccionada es mayor que stock.\n        // Si se da esta situaciÃ³n, el toope pasarÃ±a al valor del stock\n        if (this.product.qty > this.product.stock) {\n          this.product.qty = this.product.stock;\n        }\n\n        if (this.product.stock === 0) {\n          this.product.qty = 1;\n        }\n      }\n    );\n   */\n\n  return (\n    <>\n      {loading && <Loading />}\n      {!!dataDetails && (\n        <div className=\"container mb-2\">\n          <div className=\"row game-details\">\n            <div className=\"col-md-1\" id=\"screens-section\">\n              {detailsSelect.product.screenshoot.map((item, index) => (\n                <img\n                  key={index}\n                  className=\"img-fluid mini\"\n                  src={item}\n                  alt=\"\"\n                  onClick={() => imageClick(index)}\n                />\n              ))}\n            </div>\n            <div className=\"col-md-7\">\n              <img className=\"img-fluid\" src={principalImage} alt=\"\" />\n            </div>\n\n            <div className=\"col-md-4\">\n              <h3 className=\"my-3\">\n                {\n                  <p>\n                    {detailsSelect.product.name} ({detailsSelect.platform.name})\n                  </p>\n                }\n              </h3>\n              {\n                <Rating\n                  max={5}\n                  ratingItem={{\n                    value: detailsSelect.product.rating.value,\n                    count: detailsSelect.product.rating.count,\n                  }}\n                />\n              }\n              <p className=\"price mt-2\">â‚¬ {detailsSelect.price}</p>\n              {<p className=\"mt-3\">Stock: {detailsSelect.stock}</p>}\n              <hr />\n              {detailsSelect.stock === 0 ? (\n                <span>\n                  No hay stock. Producto no disponible en este momento.\n                </span>\n              ) : (\n                <QuantitySelector\n                  stock={detailsSelect.stock}\n                  updateValue={updateValue}\n                />\n              )}\n              <br />\n              <span className=\"h5\">Plataformas:</span>&nbsp;&nbsp;\n              <select onChange={selectOtherPlatform}>\n                <option value={detailsSelect.id}>\n                  {detailsSelect.platform.name}\n                </option>\n                {detailsSelect.relationalProducts.map((item) => (\n                  <option value={item.id} key={item.id}>\n                    {item.platform.name}\n                  </option>\n                ))}\n              </select>\n              <br />\n              <button className=\"btn btn-outline-dark mt-2\" onClick={addCart}>\n                <i className=\"fas fa-cart-plus\"></i>&nbsp;Add cart\n              </button>\n            </div>\n          </div>\n\n          <h3 className=\"my-4\">Juegos que te puedan interesar</h3>\n          <div className=\"row other-interest-games\">\n            {\n              // Bucle con los items\n              relationalItems.map((item, index) => (\n                <div\n                  className=\"col-md-2 col-sm-6 mb-4\"\n                  key={index}\n                  onClick={() => navigateTo(\"games/details\", item.id)}\n                  title={item.product.name.concat(` (${item.platform.name})`)}\n                >\n                  <img\n                    className=\"img-fluid more-games\"\n                    src={item.product.img}\n                    alt=\"{{ itemInfo.name }} ( {{ itemInfo.description }})\"\n                  />\n                </div>\n              ))\n            }\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Details;\n","import '../../utilities/globals';\nimport { useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { equal } from '@wry/equality';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport {\n  SubscriptionHookOptions,\n  SubscriptionResult\n} from '../types/types';\nimport { OperationVariables } from '../../core';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>,\n) {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  const [result, setResult] = useState<SubscriptionResult<TData>>({\n    loading: !options?.skip,\n    error: void 0,\n    data: void 0,\n    variables: options?.variables,\n  });\n\n  const [observable, setObservable] = useState(() => {\n    if (options?.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options?.variables,\n      fetchPolicy: options?.fetchPolicy,\n      context: options?.context,\n    });\n  });\n\n  const ref = useRef({ client, subscription, options });\n  useEffect(() => {\n    let shouldResubscribe = options?.shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options!);\n    }\n\n    if (options?.skip && !options?.skip !== !ref.current.options?.skip) {\n      setResult({\n        loading: false,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(null);\n    } else if (\n      shouldResubscribe !== false && (\n        client !== ref.current.client ||\n        subscription !== ref.current.subscription ||\n        options?.fetchPolicy !== ref.current.options?.fetchPolicy ||\n        !options?.skip !== !ref.current.options?.skip ||\n        !equal(options?.variables, ref.current.options?.variables)\n      )\n    ) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options?.variables,\n        fetchPolicy: options?.fetchPolicy,\n        context: options?.context,\n      }));\n    }\n\n    Object.assign(ref.current, { client, subscription, options });\n  }, [client, subscription, options]);\n\n  useEffect(() => {\n    if (!observable) {\n      return;\n    }\n\n    const subscription = observable.subscribe({\n      next(fetchResult) {\n        const result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data!,\n          error: void 0,\n          variables: options?.variables,\n        };\n        setResult(result);\n\n        ref.current.options?.onSubscriptionData?.({\n          client,\n          subscriptionData: result\n        });\n      },\n      error(error) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error,\n          variables: options?.variables,\n        });\n      },\n      complete() {\n        ref.current.options?.onSubscriptionComplete?.();\n      },\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [observable]);\n\n  return result;\n}\n"],"names":["className","size","SHOP_PRODUCT_FRAGMENT","gql","EAGER_METHODS","DETAILS_PAGE","manageProduct","useCart","useState","useParams","id","idProduct","setIdProduct","principalImage","setPrincipalImage","quantity","setQuantity","query","options","called","execution","setExecution","result","useQuery","fetchPolicy","skip","undefined","loading","data","error","eagerMethods","useMemo","key","method","args","Object","assign","useCallback","executeOptions","refetch","variables","then","result1","result2","useLazyQuery","getDetails","dataDetails","detailsSelect","details","shopProduct","relationalItems","randomItems","shopProducts","useEffect","showPlatform","relationScreens","stock","subscription","client","useApolloClient","setResult","subscribe","context","observable","setObservable","ref","useRef","shouldResubscribe","current","next","fetchResult","onSubscriptionData","subscriptionData","complete","onSubscriptionComplete","unsubscribe","useSubscription","product","screenshoot","console","log","Loading","map","item","index","src","alt","onClick","imageClick","name","platform","max","ratingItem","value","rating","count","price","updateValue","qty","onChange","event","target","window","history","replaceState","relationalProducts","productToCart","description","img","navigateTo","title","concat"],"sourceRoot":""}