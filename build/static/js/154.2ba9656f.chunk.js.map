{"version":3,"file":"static/js/154.2ba9656f.chunk.js","mappings":"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","sources":["graphql/operations/fragment/user.js","graphql/operations/fragment/result-info.js","graphql/operations/query/user.js","components/LoginData.js","constants/regex.js","pages/public/forms/Login.js","../node_modules/@apollo/src/react/hooks/useQuery.ts"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const USER_FRAGMENT = gql`\n  fragment UserObject on User {\n    id\n    name\n    lastname\n    email\n    registerDate @include(if: $include)\n    birthday @include(if: $include)\n    role\n    active\n    stripeCustomer\n  }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const RESULT_INFO_FRAGMENT = gql`\n  fragment ResultInfoObject on ResultInfo {\n    page\n    pages\n    total\n    itemsPage\n  }\n`;\n","import { RESULT_INFO_FRAGMENT } from \"./../fragment/result-info\";\nimport { USER_FRAGMENT } from \"./../fragment/user\";\nimport { gql } from \"@apollo/client\";\n\nexport const LOGIN_QUERY = gql`\n  query getLogin($email: String!, $password: String!, $include: Boolean!) {\n    login(email: $email, password: $password) {\n      status\n      message\n      token\n      user {\n        ...UserObject\n      }\n    }\n  }\n  ${USER_FRAGMENT}\n`;\n\nexport const USERS_LIST_QUERY = gql`\n  query usersList(\n    $include: Boolean!\n    $page: Int\n    $itemsPage: Int\n    $active: ActiveFilterEnum\n  ) {\n    users(page: $page, itemsPage: $itemsPage, active: $active) {\n      info {\n        ...ResultInfoObject\n      }\n      status\n      message\n      users {\n        ...UserObject\n      }\n    }\n  }\n  ${USER_FRAGMENT}\n  ${RESULT_INFO_FRAGMENT}\n`;\n\nexport const ME_DATA_QUERY = gql`\n  query meData($include: Boolean!) {\n    me {\n      status\n      message\n      user {\n        ...UserObject\n      }\n    }\n  }\n  ${USER_FRAGMENT}\n`;\n","import { LOGIN_QUERY } from \"../graphql/operations/query/user\";\nimport { useQuery } from \"@apollo/client\";\nimport { useContext } from \"react\";\n\nimport PropTypes from \"prop-types\";\nimport { AppContext } from \"../application/provider\";\n\nexport const LoginData = ({ email, password }) => {\n  const { data, error, loading } = useQuery(LOGIN_QUERY, {\n    variables: { email, password, include: false },\n  });\n\n  const [loginState, loginSetState] = useContext(AppContext);\n\n  if (loginState.displayName !== \"\") {\n    console.log(loginState.displayName);\n  }\n\n  // console.log(loading, data);\n\n  if (data && data.login.status) {\n    console.log(data.login.token);\n    const sessionData = {\n      displayName: \"Gamezonia\",\n      token: data.login.token,\n      expiresIn: new Date(new Date().getTime() + 60 * 60 * 24 * 1000),\n    };\n    localStorage.setItem(\"session\", JSON.stringify(sessionData));\n    loginSetState(sessionData);\n    // return <p>OK</p>;\n    // window.alert(\"LOGIN OK\");\n    window.location.replace(\"/\");\n  }\n  return (\n    <>\n      {loading ? (\n        <p>Loading...</p>\n      ) : error ? (\n        <p>{error}</p>\n      ) : (\n        <p className=\"alert alert-danger\">{data.login.message}</p>\n      )}\n    </>\n  );\n};\n\n// Para obligar pasar el argumento para el objeto\nLoginData.propTypes = {\n  email: PropTypes.string.isRequired,\n  password: PropTypes.string.isRequired,\n};\n","export const EMAIL_VALIDATIONS = /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;","import { useContext, useState } from \"react\";\nimport { LoginData } from \"../../../components/LoginData\";\nimport { useForm } from \"react-hook-form\";\nimport \"./forms.css\";\nimport { EMAIL_VALIDATIONS } from \"../../../constants/regex\";\nimport { AppContext } from \"../../../application/provider\";\nconst Login = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    mode: \"onChange\"\n  });\n\n  const [login, setLogin] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const [loginState] = useContext(AppContext);\n\n  const defaultValue = \"user@gamezonia.com\";\n\n  const onSubmit = (data) => {\n    setLogin({ email: data.email, password: data.password });\n  };\n\n  if (loginState.token !== \"\" && !new Date(loginState.expiresIn).getTime() < new Date().getTime() / 1000)\n   {\n     console.log(\"Session OK\");\n     window.location.replace(\"/\");\n   }\n  return (\n    <div className=\"container mb-2\">\n      <h1>Login</h1>\n      {login.email !== \"\" ? (\n        <LoginData email={login.email} password={login.password} />\n      ) : (\n        <p>Haz click para iniciar sesiÃ³n</p>\n      )}\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mb-3\">\n          <label htmlFor=\"email\" className=\"form-label\">\n            Email\n          </label>\n          <input\n            autoFocus\n            className=\"form-control\"\n            defaultValue={defaultValue}\n            placeholder=\"Input email address\"\n            {...register(\"email\", {\n              required: \"This field is required\",\n              pattern: {\n                value: EMAIL_VALIDATIONS,\n                message: \"Invalid email address\",\n              },\n            })}\n          />\n          {errors.email && <p className=\"validation alert alert-danger\">{errors.email.message}</p>}{\" \"}\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"password\" className=\"form-label\">\n            Password\n          </label>\n          <input\n            className=\"form-control\"\n            type=\"password\"\n            defaultValue=\"123456\"\n            placeholder=\"Input password\"\n            {...register(\"password\", { required: true, minLength: 6})}\n          />\n\n          {errors.password && (\n            <p className=\"validation alert alert-danger\">This field is required and min length is 6 characters</p>\n          )}\n        </div>\n        <input type=\"submit\" className=\"btn btn-dark\" />\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { equal } from '@wry/equality';\nimport { OperationVariables, mergeOptions } from '../../core';\nimport { getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n): QueryResult<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const client = useApolloClient(options?.client);\n  const defaultWatchQueryOptions = client.defaultOptions.watchQuery;\n  verifyDocumentType(query, DocumentType.Query);\n  const [obsQuery, setObsQuery] = useState(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    let obsQuery: ObservableQuery<TData, TVariables> | null = null;\n    if (context.renderPromises) {\n      obsQuery = context.renderPromises.getSSRObservable(watchQueryOptions);\n    }\n\n    if (!obsQuery) {\n      // Is it safe (StrictMode/memory-wise) to call client.watchQuery here?\n      obsQuery = client.watchQuery(watchQueryOptions);\n      if (context.renderPromises) {\n        context.renderPromises.registerSSRObservable(\n          obsQuery,\n          watchQueryOptions,\n        );\n      }\n    }\n\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      obsQuery.getCurrentResult().loading\n    ) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      context.renderPromises.addQueryPromise(\n        {\n          // The only options which seem to actually be used by the\n          // RenderPromises class are query and variables.\n          getOptions: () => createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n          fetchData: () => new Promise<void>((resolve) => {\n            const sub = obsQuery!.subscribe({\n              next(result) {\n                if (!result.loading) {\n                  resolve()\n                  sub.unsubscribe();\n                }\n              },\n              error() {\n                resolve();\n                sub.unsubscribe();\n              },\n              complete() {\n                resolve();\n              },\n            });\n          }),\n        },\n        // This callback never seemed to do anything\n        () => null,\n      );\n    }\n\n    return obsQuery;\n  });\n\n  let [result, setResult] = useState(() => {\n    const result = obsQuery.getCurrentResult();\n    if (!result.loading && options) {\n      if (result.error) {\n        options.onError?.(result.error);\n      } else if (result.data) {\n        options.onCompleted?.(result.data);\n      }\n    }\n\n    return result;\n  });\n\n  const ref = useRef({\n    client,\n    query,\n    options,\n    result,\n    previousData: void 0 as TData | undefined,\n    watchQueryOptions: createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n  });\n\n  // An effect to recreate the obsQuery whenever the client or query changes.\n  // This effect is also responsible for checking and updating the obsQuery\n  // options whenever they change.\n  useEffect(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    let nextResult: ApolloQueryResult<TData> | undefined;\n    if (ref.current.client !== client || !equal(ref.current.query, query)) {\n      const obsQuery = client.watchQuery(watchQueryOptions);\n      setObsQuery(obsQuery);\n      nextResult = obsQuery.getCurrentResult();\n    } else if (!equal(ref.current.watchQueryOptions, watchQueryOptions)) {\n      obsQuery.setOptions(watchQueryOptions).catch(() => {});\n      nextResult = obsQuery.getCurrentResult();\n      ref.current.watchQueryOptions = watchQueryOptions;\n    }\n\n    if (nextResult) {\n      const previousResult = ref.current.result;\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = nextResult);\n      if (!nextResult.loading && options) {\n        if (nextResult.error) {\n          options.onError?.(nextResult.error);\n        } else if (nextResult.data) {\n          options.onCompleted?.(nextResult.data);\n        }\n      }\n    }\n\n    Object.assign(ref.current, { client, query });\n  }, [obsQuery, client, query, options]);\n\n  // An effect to subscribe to the current observable query\n  useEffect(() => {\n    if (context.renderPromises) {\n      return;\n    }\n\n    let subscription = obsQuery.subscribe(onNext, onError);\n    // We use `getCurrentResult()` instead of the callback argument because\n    // the values differ slightly. Specifically, loading results will have\n    // an empty object for data instead of `undefined` for some reason.\n    function onNext() {\n      const previousResult = ref.current.result;\n      const result = obsQuery.getCurrentResult();\n      // Make sure we're not attempting to re-render similar results\n      if (\n        previousResult &&\n        previousResult.loading === result.loading &&\n        previousResult.networkStatus === result.networkStatus &&\n        equal(previousResult.data, result.data)\n      ) {\n        return;\n      }\n\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = result);\n      if (!result.loading) {\n        ref.current.options?.onCompleted?.(result.data);\n      }\n    }\n\n    function onError(error: Error) {\n      const last = obsQuery[\"last\"];\n      subscription.unsubscribe();\n      // Unfortunately, if `lastError` is set in the current\n      // `observableQuery` when the subscription is re-created,\n      // the subscription will immediately receive the error, which will\n      // cause it to terminate again. To avoid this, we first clear\n      // the last error/result from the `observableQuery` before re-starting\n      // the subscription, and restore it afterwards (so the subscription\n      // has a chance to stay open).\n      try {\n        obsQuery.resetLastResults();\n        subscription = obsQuery.subscribe(onNext, onError);\n      } finally {\n        obsQuery[\"last\"] = last;\n      }\n\n      if (!error.hasOwnProperty('graphQLErrors')) {\n        // The error is not a GraphQL error\n        throw error;\n      }\n\n      const previousResult = ref.current.result;\n      if (\n        (previousResult && previousResult.loading) ||\n        !equal(error, previousResult.error)\n      ) {\n        setResult(ref.current.result = {\n          data: previousResult.data,\n          error: error as ApolloError,\n          loading: false,\n          networkStatus: NetworkStatus.error,\n        });\n        ref.current.options?.onError?.(error as ApolloError);\n      }\n    }\n\n    return () => subscription.unsubscribe();\n  }, [obsQuery, context.renderPromises, client.disableNetworkFetches]);\n\n  let partial: boolean | undefined;\n  ({ partial, ...result } = result);\n\n  {\n    // BAD BOY CODE BLOCK WHERE WE PUT SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      partial &&\n      options?.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      obsQuery.options.fetchPolicy !== 'cache-only'\n    ) {\n      result = {\n        ...result,\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      };\n\n      obsQuery.refetch();\n    }\n\n    // TODO: This is a hack to make sure useLazyQuery executions update the\n    // obsevable query options for ssr.\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      result.loading\n    ) {\n      obsQuery.setOptions(createWatchQueryOptions(query, options, defaultWatchQueryOptions)).catch(() => {});\n    }\n\n    // We assign options during rendering as a guard to make sure that\n    // callbacks like onCompleted and onError are not stale.\n    Object.assign(ref.current, { options });\n  }\n\n  if (\n    (context.renderPromises || client.disableNetworkFetches) &&\n    options?.ssr === false\n  ) {\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    result = ref.current.result = {\n      loading: true,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.loading,\n    };\n  } else if (options?.skip || options?.fetchPolicy === 'standby') {\n    // When skipping a query (ie. we're not querying for data but still want to\n    // render children), make sure the `data` is cleared out and `loading` is\n    // set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate that\n    // previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n    // to address this.\n    result = {\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.ready,\n    };\n  }\n\n  if (result.errors && result.errors.length) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    result = {\n      ...result,\n      error: result.error || new ApolloError({ graphQLErrors: result.errors }),\n    };\n  }\n\n  const obsQueryFields = useMemo(() => ({\n    refetch: obsQuery.refetch.bind(obsQuery),\n    fetchMore: obsQuery.fetchMore.bind(obsQuery),\n    updateQuery: obsQuery.updateQuery.bind(obsQuery),\n    startPolling: obsQuery.startPolling.bind(obsQuery),\n    stopPolling: obsQuery.stopPolling.bind(obsQuery),\n    subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n  }), [obsQuery]);\n\n  return {\n    ...obsQueryFields,\n    variables: createWatchQueryOptions(query, options, defaultWatchQueryOptions).variables,\n    client,\n    called: true,\n    previousData: ref.current.previousData,\n    ...result,\n  };\n}\n\n/**\n * A function to massage options before passing them the ObservableQuery.\n */\nfunction createWatchQueryOptions<TData, TVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = {},\n  defaultOptions?: Partial<WatchQueryOptions<any, any>>\n): WatchQueryOptions<TVariables, TData> {\n  // TODO: For some reason, we pass context, which is the React Apollo Context,\n  // into observable queries, and test for that.\n  // removing hook specific options\n  const {\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    ...otherOptions\n  } = options;\n\n  let watchQueryOptions = { query, ...otherOptions };\n  if (defaultOptions) {\n    watchQueryOptions = mergeOptions(defaultOptions, watchQueryOptions);\n  }\n\n  if (skip) {\n    watchQueryOptions.fetchPolicy = 'standby';\n  } else if (\n    watchQueryOptions.context?.renderPromises &&\n    (\n      watchQueryOptions.fetchPolicy === 'network-only' ||\n      watchQueryOptions.fetchPolicy === 'cache-and-network'\n    )\n  ) {\n    // this behavior was added to react-apollo without explanation in this PR\n    // https://github.com/apollographql/react-apollo/pull/1579\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  } else if (!watchQueryOptions.fetchPolicy) {\n    // cache-first is the default policy, but we explicitly assign it here so\n    // the cache policies computed based on options can be cleared\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  }\n\n  if (!watchQueryOptions.variables) {\n    watchQueryOptions.variables = {} as TVariables;\n  }\n\n  return watchQueryOptions;\n}\n"],"names":["USER_FRAGMENT","gql","RESULT_INFO_FRAGMENT","LOGIN_QUERY","LoginData","email","password","useQuery","variables","include","data","error","loading","useContext","AppContext","loginState","loginSetState","displayName","console","log","login","status","token","sessionData","expiresIn","Date","getTime","localStorage","setItem","JSON","stringify","window","location","replace","className","message","EMAIL_VALIDATIONS","useForm","mode","register","handleSubmit","errors","formState","useState","setLogin","onSubmit","htmlFor","autoFocus","defaultValue","placeholder","required","pattern","value","type","minLength","query","options","context","client","defaultWatchQueryOptions","defaultOptions","watchQuery","partial","watchQueryOptions","createWatchQueryOptions","obsQuery","renderPromises","getSSRObservable","registerSSRObservable","ssr","skip","getCurrentResult","addQueryPromise","getOptions","fetchData","Promise","resolve","sub","subscribe","next","result","unsubscribe","complete","setObsQuery","onError","onCompleted","setResult","ref","useRef","previousData","useEffect","nextResult","current","setOptions","catch","previousResult","Object","assign","subscription","onNext","last","resetLastResults","hasOwnProperty","networkStatus","disableNetworkFetches","partialRefetch","keys","length","fetchPolicy","refetch","graphQLErrors","obsQueryFields","useMemo","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","called","otherOptions"],"sourceRoot":""}