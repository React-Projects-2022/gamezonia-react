{"version":3,"file":"static/js/814.03589e7e.chunk.js","mappings":"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","sources":["graphql/operations/fragment/user.js","graphql/operations/mutation/user.js","pages/public/forms/Register.js","../node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const USER_FRAGMENT = gql`\n  fragment UserObject on User {\n    id\n    name\n    lastname\n    email\n    registerDate @include(if: $include)\n    birthday @include(if: $include)\n    role\n    active\n    stripeCustomer\n  }\n`;\n","import { USER_FRAGMENT } from './../fragment/user';\nimport  { gql } from \"@apollo/client\";\nexport const REGISTER_USER = gql`\n  mutation addUser($user: UserInput!, $include: Boolean!) {\n    register(user: $user) {\n      status\n      message\n      user {\n        ...UserObject\n      }\n    }\n  }\n  ${USER_FRAGMENT}\n`;\n\nexport const UPDATE_USER = gql`\n  mutation updateUser($user: UserInput!, $include: Boolean!) {\n    updateUser(user: $user) {\n      status\n      message\n      user {\n        ...UserObject\n      }\n    }\n  }\n  ${USER_FRAGMENT}\n`;\n\nexport const BLOCK_USER = gql`\n  mutation blockUser($id: ID!, $unblock: Boolean, $admin: Boolean) {\n    blockUser(id: $id, unblock: $unblock, admin: $admin) {\n      status\n      message\n    }\n  }\n`;\n\nexport const ACTIVE_EMAIL_USER = gql`\n  mutation activarUsuarioEmail($id: ID!, $email: String!) {\n    activeUserEmail( id: $id, email: $email ) {\n      status\n      message\n    }\n  }\n`;\n\nexport const ACTIVE_USER = gql`\n  mutation activeUser($id: ID!, $birthday: String!, $password: String!) {\n    activeUserAction(id: $id, birthday: $birthday, password: $password) {\n      status\n      message\n    }\n  }\n`;","import { useForm } from \"react-hook-form\";\nimport \"./forms.css\";\nimport { REGISTER_USER } from \"../../../graphql/operations/mutation/user\";\nimport { useMutation } from \"@apollo/client\";\nimport { useState } from \"react\";\nconst Register = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const [result, setResult] = useState({});\n\n  const [registerUser] = useMutation(REGISTER_USER, {\n    update: (__, mutationResult) => {\n      const { register } = mutationResult.data;\n      setResult(register);\n\n    },\n  });\n\n  console.log(result);\n\n  const onSubmit = (data) => {\n    registerUser({\n      variables: {\n        user: {\n          email: data.email,\n          password: data.password,\n          name: data.name,\n          lastname: data.lastname,\n          birthday: data.birthday,\n        },\n        include: true,\n      },\n    });\n  };\n\n  return (\n    <>\n      <h1>Register</h1>\n      <p>{result.status}</p>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label htmlFor=\"name\">First Name</label>\n        <input\n          placeholder=\"Input your name\"\n          {...register(\"name\", {\n            required: \"This field is a required\",\n            minLength: {\n              value: 2,\n              message: \"Min length is 2\",\n            },\n          })}\n        />\n        {errors.name && <p>{errors.name.message}</p>}\n\n        <label htmlFor=\"lastname\">Last Name</label>\n        <input\n          placeholder=\"Input your lastname\"\n          {...register(\"lastname\", {\n            required: \"This field is required\",\n            minLength: {\n              value: 2,\n              message: \"Min length is 2\",\n            },\n          })}\n        />\n        {errors.lastname && <p>{errors.lastNname.message}</p>}\n        <label htmlFor=\"birthday\">Birthday</label>\n        <input\n          type=\"date\"\n          id=\"start\"\n          min=\"1900-01-01\"\n          {...register(\"birthday\", {})}\n        ></input>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          placeholder=\"bluebill1049@hotmail.com\"\n          type=\"text\"\n          {...register(\"email\", {\n            required: \"this is required\",\n            pattern: {\n              value:\n                /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\n              message: \"Invalid email address\",\n            },\n          })}\n        />\n        {errors.email && <p>{errors.email.message}</p>}\n        <label htmlFor=\"password\">Password</label>\n        <input\n          type=\"password\"\n          defaultValue=\"123456\"\n          placeholder=\"password\"\n          {...register(\"password\", { required: true })}\n        />\n\n        {errors.password && (\n          <p className=\"validation\">This field is required</p>\n        )}\n        <input type=\"submit\" />\n      </form>\n    </>\n  );\n};\n\nexport default Register;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      baseOptions.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (baseOptions.onError || clientOptions.onError) {\n        baseOptions.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => () => {\n    ref.current.isMounted = false;\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"names":["USER_FRAGMENT","gql","REGISTER_USER","useForm","register","handleSubmit","errors","formState","useState","result","setResult","mutation","options","client","useApolloClient","called","loading","ref","useRef","mutationId","isMounted","Object","assign","current","execute","useCallback","executeOptions","baseOptions","ignoreResults","error","data","clientOptions","mutate","then","response","length","graphQLErrors","onCompleted","catch","onError","reset","useEffect","useMutation","update","__","mutationResult","registerUser","console","log","status","onSubmit","variables","user","email","password","name","lastname","birthday","include","htmlFor","placeholder","required","minLength","value","message","lastNname","type","id","min","pattern","defaultValue","className"],"sourceRoot":""}